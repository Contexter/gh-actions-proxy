// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
import HTTPTypes
extension APIProtocol {
    /// Registers each operation handler with the provided transport.
    /// - Parameters:
    ///   - transport: A transport to which to register the operation handlers.
    ///   - serverURL: A URL used to determine the path prefix for registered
    ///   request handlers.
    ///   - configuration: A set of configuration values for the server.
    ///   - middlewares: A list of middlewares to call before the handler.
    internal func registerHandlers(
        on transport: any ServerTransport,
        serverURL: Foundation.URL = .defaultOpenAPIServerURL,
        configuration: Configuration = .init(),
        middlewares: [any ServerMiddleware] = []
    ) throws {
        let server = UniversalServer(
            serverURL: serverURL,
            handler: self,
            configuration: configuration,
            middlewares: middlewares
        )
        try transport.register(
            {
                try await server.listWorkflows(
                    request: $0,
                    body: $1,
                    metadata: $2
                )
            },
            method: .get,
            path: server.apiPathComponentsWithServerPrefix("/repos/{owner}/{repo}/actions/workflows")
        )
        try transport.register(
            {
                try await server.getWorkflow(
                    request: $0,
                    body: $1,
                    metadata: $2
                )
            },
            method: .get,
            path: server.apiPathComponentsWithServerPrefix("/repos/{owner}/{repo}/actions/workflows/{workflow_id}")
        )
        try transport.register(
            {
                try await server.listWorkflowRuns(
                    request: $0,
                    body: $1,
                    metadata: $2
                )
            },
            method: .get,
            path: server.apiPathComponentsWithServerPrefix("/repos/{owner}/{repo}/actions/runs")
        )
        try transport.register(
            {
                try await server.getWorkflowRun(
                    request: $0,
                    body: $1,
                    metadata: $2
                )
            },
            method: .get,
            path: server.apiPathComponentsWithServerPrefix("/repos/{owner}/{repo}/actions/runs/{run_id}")
        )
        try transport.register(
            {
                try await server.downloadWorkflowLogs(
                    request: $0,
                    body: $1,
                    metadata: $2
                )
            },
            method: .get,
            path: server.apiPathComponentsWithServerPrefix("/repos/{owner}/{repo}/actions/runs/{run_id}/logs")
        )
    }
}

fileprivate extension UniversalServer where APIHandler: APIProtocol {
    /// List Workflows
    ///
    /// Retrieves a list of workflows for the specified repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/workflows`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/workflows/get(listWorkflows)`.
    func listWorkflows(
        request: HTTPTypes.HTTPRequest,
        body: OpenAPIRuntime.HTTPBody?,
        metadata: OpenAPIRuntime.ServerRequestMetadata
    ) async throws -> (HTTPTypes.HTTPResponse, OpenAPIRuntime.HTTPBody?) {
        try await handle(
            request: request,
            requestBody: body,
            metadata: metadata,
            forOperation: Operations.listWorkflows.id,
            using: {
                APIHandler.listWorkflows($0)
            },
            deserializer: { request, requestBody, metadata in
                let path: Operations.listWorkflows.Input.Path = .init(
                    owner: try converter.getPathParameterAsURI(
                        in: metadata.pathParameters,
                        name: "owner",
                        as: Swift.String.self
                    ),
                    repo: try converter.getPathParameterAsURI(
                        in: metadata.pathParameters,
                        name: "repo",
                        as: Swift.String.self
                    )
                )
                return Operations.listWorkflows.Input(path: path)
            },
            serializer: { output, request in
                switch output {
                case let .ok(value):
                    suppressUnusedWarning(value)
                    var response = HTTPTypes.HTTPResponse(soar_statusCode: 200)
                    suppressMutabilityWarning(&response)
                    return (response, nil)
                case let .unauthorized(value):
                    suppressUnusedWarning(value)
                    var response = HTTPTypes.HTTPResponse(soar_statusCode: 401)
                    suppressMutabilityWarning(&response)
                    return (response, nil)
                case let .undocumented(statusCode, _):
                    return (.init(soar_statusCode: statusCode), nil)
                }
            }
        )
    }
    /// Get Workflow Details
    ///
    /// Retrieves details of a specific workflow.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/workflows/{workflow_id}/get(getWorkflow)`.
    func getWorkflow(
        request: HTTPTypes.HTTPRequest,
        body: OpenAPIRuntime.HTTPBody?,
        metadata: OpenAPIRuntime.ServerRequestMetadata
    ) async throws -> (HTTPTypes.HTTPResponse, OpenAPIRuntime.HTTPBody?) {
        try await handle(
            request: request,
            requestBody: body,
            metadata: metadata,
            forOperation: Operations.getWorkflow.id,
            using: {
                APIHandler.getWorkflow($0)
            },
            deserializer: { request, requestBody, metadata in
                let path: Operations.getWorkflow.Input.Path = .init(
                    owner: try converter.getPathParameterAsURI(
                        in: metadata.pathParameters,
                        name: "owner",
                        as: Swift.String.self
                    ),
                    repo: try converter.getPathParameterAsURI(
                        in: metadata.pathParameters,
                        name: "repo",
                        as: Swift.String.self
                    ),
                    workflow_id: try converter.getPathParameterAsURI(
                        in: metadata.pathParameters,
                        name: "workflow_id",
                        as: Swift.Int.self
                    )
                )
                return Operations.getWorkflow.Input(path: path)
            },
            serializer: { output, request in
                switch output {
                case let .ok(value):
                    suppressUnusedWarning(value)
                    var response = HTTPTypes.HTTPResponse(soar_statusCode: 200)
                    suppressMutabilityWarning(&response)
                    return (response, nil)
                case let .unauthorized(value):
                    suppressUnusedWarning(value)
                    var response = HTTPTypes.HTTPResponse(soar_statusCode: 401)
                    suppressMutabilityWarning(&response)
                    return (response, nil)
                case let .notFound(value):
                    suppressUnusedWarning(value)
                    var response = HTTPTypes.HTTPResponse(soar_statusCode: 404)
                    suppressMutabilityWarning(&response)
                    return (response, nil)
                case let .undocumented(statusCode, _):
                    return (.init(soar_statusCode: statusCode), nil)
                }
            }
        )
    }
    /// List Workflow Runs
    ///
    /// Retrieves a list of workflow runs for the repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/runs`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runs/get(listWorkflowRuns)`.
    func listWorkflowRuns(
        request: HTTPTypes.HTTPRequest,
        body: OpenAPIRuntime.HTTPBody?,
        metadata: OpenAPIRuntime.ServerRequestMetadata
    ) async throws -> (HTTPTypes.HTTPResponse, OpenAPIRuntime.HTTPBody?) {
        try await handle(
            request: request,
            requestBody: body,
            metadata: metadata,
            forOperation: Operations.listWorkflowRuns.id,
            using: {
                APIHandler.listWorkflowRuns($0)
            },
            deserializer: { request, requestBody, metadata in
                let path: Operations.listWorkflowRuns.Input.Path = .init(
                    owner: try converter.getPathParameterAsURI(
                        in: metadata.pathParameters,
                        name: "owner",
                        as: Swift.String.self
                    ),
                    repo: try converter.getPathParameterAsURI(
                        in: metadata.pathParameters,
                        name: "repo",
                        as: Swift.String.self
                    )
                )
                return Operations.listWorkflowRuns.Input(path: path)
            },
            serializer: { output, request in
                switch output {
                case let .ok(value):
                    suppressUnusedWarning(value)
                    var response = HTTPTypes.HTTPResponse(soar_statusCode: 200)
                    suppressMutabilityWarning(&response)
                    return (response, nil)
                case let .unauthorized(value):
                    suppressUnusedWarning(value)
                    var response = HTTPTypes.HTTPResponse(soar_statusCode: 401)
                    suppressMutabilityWarning(&response)
                    return (response, nil)
                case let .undocumented(statusCode, _):
                    return (.init(soar_statusCode: statusCode), nil)
                }
            }
        )
    }
    /// Get Workflow Run Details
    ///
    /// Retrieves details of a specific workflow run.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/runs/{run_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runs/{run_id}/get(getWorkflowRun)`.
    func getWorkflowRun(
        request: HTTPTypes.HTTPRequest,
        body: OpenAPIRuntime.HTTPBody?,
        metadata: OpenAPIRuntime.ServerRequestMetadata
    ) async throws -> (HTTPTypes.HTTPResponse, OpenAPIRuntime.HTTPBody?) {
        try await handle(
            request: request,
            requestBody: body,
            metadata: metadata,
            forOperation: Operations.getWorkflowRun.id,
            using: {
                APIHandler.getWorkflowRun($0)
            },
            deserializer: { request, requestBody, metadata in
                let path: Operations.getWorkflowRun.Input.Path = .init(
                    owner: try converter.getPathParameterAsURI(
                        in: metadata.pathParameters,
                        name: "owner",
                        as: Swift.String.self
                    ),
                    repo: try converter.getPathParameterAsURI(
                        in: metadata.pathParameters,
                        name: "repo",
                        as: Swift.String.self
                    ),
                    run_id: try converter.getPathParameterAsURI(
                        in: metadata.pathParameters,
                        name: "run_id",
                        as: Swift.Int.self
                    )
                )
                return Operations.getWorkflowRun.Input(path: path)
            },
            serializer: { output, request in
                switch output {
                case let .ok(value):
                    suppressUnusedWarning(value)
                    var response = HTTPTypes.HTTPResponse(soar_statusCode: 200)
                    suppressMutabilityWarning(&response)
                    return (response, nil)
                case let .unauthorized(value):
                    suppressUnusedWarning(value)
                    var response = HTTPTypes.HTTPResponse(soar_statusCode: 401)
                    suppressMutabilityWarning(&response)
                    return (response, nil)
                case let .notFound(value):
                    suppressUnusedWarning(value)
                    var response = HTTPTypes.HTTPResponse(soar_statusCode: 404)
                    suppressMutabilityWarning(&response)
                    return (response, nil)
                case let .undocumented(statusCode, _):
                    return (.init(soar_statusCode: statusCode), nil)
                }
            }
        )
    }
    /// Download Workflow Logs
    ///
    /// Downloads the logs for a specific workflow run.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/runs/{run_id}/logs`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runs/{run_id}/logs/get(downloadWorkflowLogs)`.
    func downloadWorkflowLogs(
        request: HTTPTypes.HTTPRequest,
        body: OpenAPIRuntime.HTTPBody?,
        metadata: OpenAPIRuntime.ServerRequestMetadata
    ) async throws -> (HTTPTypes.HTTPResponse, OpenAPIRuntime.HTTPBody?) {
        try await handle(
            request: request,
            requestBody: body,
            metadata: metadata,
            forOperation: Operations.downloadWorkflowLogs.id,
            using: {
                APIHandler.downloadWorkflowLogs($0)
            },
            deserializer: { request, requestBody, metadata in
                let path: Operations.downloadWorkflowLogs.Input.Path = .init(
                    owner: try converter.getPathParameterAsURI(
                        in: metadata.pathParameters,
                        name: "owner",
                        as: Swift.String.self
                    ),
                    repo: try converter.getPathParameterAsURI(
                        in: metadata.pathParameters,
                        name: "repo",
                        as: Swift.String.self
                    ),
                    run_id: try converter.getPathParameterAsURI(
                        in: metadata.pathParameters,
                        name: "run_id",
                        as: Swift.Int.self
                    )
                )
                return Operations.downloadWorkflowLogs.Input(path: path)
            },
            serializer: { output, request in
                switch output {
                case let .ok(value):
                    suppressUnusedWarning(value)
                    var response = HTTPTypes.HTTPResponse(soar_statusCode: 200)
                    suppressMutabilityWarning(&response)
                    return (response, nil)
                case let .unauthorized(value):
                    suppressUnusedWarning(value)
                    var response = HTTPTypes.HTTPResponse(soar_statusCode: 401)
                    suppressMutabilityWarning(&response)
                    return (response, nil)
                case let .notFound(value):
                    suppressUnusedWarning(value)
                    var response = HTTPTypes.HTTPResponse(soar_statusCode: 404)
                    suppressMutabilityWarning(&response)
                    return (response, nil)
                case let .undocumented(statusCode, _):
                    return (.init(soar_statusCode: statusCode), nil)
                }
            }
        )
    }
}
